swagger: '2.0'

info:
  title: Hacker News
  version: 1.0.0
  description: |
    Level 2 API for Hacker-News example from [Web Services and Applications](http://www.fib.upc.edu/en/estudiar-enginyeria-informatica/assignatures.html?assig=ASW)'s subject of the [Barcelona School of Informatics](http://www.fib.upc.edu/en.html) in [Universitat Polit√®cnica de Catalunya](http://www.upc.edu/?set_language=en).
    
    Created by:
    - [David Aleu](https://github.com/daleu)
    - [Jordi Guiu](https://github.com/guiu23)
    - [Eduard Maura](https://github.com/mapu77)
    - [Arnau Orriols](https://github.com/aog182)
  
host: pure-meadow-21519.herokuapp.com

schemes:
  - http

basePath: /api/v1
consumes:
  - application/json
produces:
  - application/hal+json

tags:
  - name: Contribution
  - name: Vote
  - name: Comment
  - name: Reply
  - name: User
  
securityDefinitions:
  token:
    type: apiKey
    name: token
    in: header
    
security:
  - token: []
    
paths:
  /contributions:
    get:
      description: |
        Gets `Contribution` objects.
        Optional query param of **type** determines
        which kind of contribution does the array contain.
        If none, all kind of contributions are returned
      tags:
        - Contribution
      parameters:
        -
          name: type
          in: query
          description: Type of contribution (ask or url)
          required: false
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            title: ArrayOfContributions
            type: array
            items:
              $ref: "#/definitions/Contribution"
        '400':
          description: Type not allowed
        '401':
          description: Unauthorized user
          
    post:
      description: |
        Creates a new `Contribution` with the information of the `body` param
      tags:
        - Contribution
      parameters:
        -
          name: body
          in: body
          required: true
          description: Contribution information
          schema:
            $ref: "#/definitions/NewContribution"
          
      responses:
        '201':
          description: Contribution created
          schema:
            $ref: "#/definitions/Contribution"
        '400':
          description: Bad request. Url or text must be set
        '401':
          description: Unauthorized user
        '409':
          description: Conflict on creating contribution. It can't have text and url
  
  /contributions/{id}:
    get:
      description: |
        Gets a specific `Contribution` by **id**
      tags:
        - Contribution
      parameters:
        -
          name: id
          in: path
          description: ID of the contribution
          required: true
          type: number
          format: int
  
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/Contribution"
        '401':
          description: Unauthorized user
        '404':
          description: Contribution not found
  
  /votes:
    post:
      description: |
        A specific `User` votes a specific `Contribution`
        Oe compulsory query params **user_id** is required and the others are optional but at least one is required.
      tags:
        - Vote
      parameters:
        -
          name: user_id
          in: query
          description:  Unique identifier representing the user that make the votation
          required: true
          type: number
          format: int
        - 
          name: contribution_id
          in: query
          description: Unique identifier representing the contribution that receives the votation
          required: false
          type: number
          format: int
        -
          name: comment_id
          in: query
          description: Unique identifier representing the comment that receives the votation
          required: false
          type: number
          format: int
        -
          name: reply_id
          in: query
          description: Unique identifier representing the reply that receives the votation
          required: false
          type: number
          format: int
          
      responses:
        '201':
          description: Vote created
        '400':
          description: Parameters not allowed
        '401':
          description: Unauthorized user
        '404':
          description: User, Contribution, Comment or Reply not found
        '409':
          description: The user has already voted this contribution
  
    delete:
      description: |
        A specific `User` unvotes a specific `Contribution`
        Two compulsory query params **user_id** and **contribution_id** are required
      tags:
        - Vote
      parameters:
        -
          name: user_id
          in: query
          description: Unique identifier representing the user that unvotes the contribution
          required: true
          type: number
          format: int
        - 
          name: contribution_id
          in: query
          description: Unique identifier representing the contribution that receives the votation
          required: false
          type: number
          format: int
        -
          name: comment_id
          in: query
          description: Unique identifier representing the comment that receives the votation
          required: false
          type: number
          format: int
        -
          name: reply_id
          in: query
          description: Unique identifier representing the reply that receives the votation
          required: false
          type: number
          format: int
          
      responses:
        '200':
          description: Successful response
        '400':
          description: Parametrs not allowed
        '401':
          description: Unauthorized user
        '404':
          description: User, Contribution, Comment or Reply not found
          
  /comments:
    get:
      description: |
        Gets all the `Comment` object of a `Contribution`
        Params **user_id** and **contribution_id** specifies the author or the contribution of the comment.
      tags:
        - Comment
      parameters:
        -
          name: user_id
          in: query
          description: Unique identifier representing the user who made the comment
          required: false
          type: number
          format: int
        -
          name: contribution_id
          in: query
          description: Unique identifier representing the contribution which the comment belongs to
          required: false
          type: number
          format: int
      responses:
        '200':  
          description: Successful response
          schema:
            title: ArrayOfComments
            type: array
            items:
              $ref: "#/definitions/Comment"
        '401':
          description: Unauthorized user
        '404':
          description: User or contribution not found
              
    post:
      description: |
        A `User` creates a new `Comment` to a specific `Contribution`
      tags:
        - Comment
      parameters:
        -
          name: user_id
          in: query
          description: Unique identifier representing the user who made the comment
          required: true
          type: number
          format: int
        -
          name: contribution_id
          in: query
          description: Unique identifier representing the commented contribution
          required: true
          type: number
          format: int
        - 
          name: body
          in: body
          description: Text of the comment
          required: true
          schema:
            $ref: "#/definitions/NewComment"
      responses:
        '201':
          description: Created comment
          schema:
            $ref: "#/definitions/Comment"
        '400':
          description: Content can not be blank
        '401':
          description: Unauthorized user
        '404':
          description: Contribution not found
  
  /comments/{id}:
    get:
      description: |
        Gets a specific `Comment` by **id**
      tags:
        - Comment
      parameters:
        -
          name: id
          in: path
          description: ID of the comment
          required: true
          type: number
          format: int
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/Comment"
        '401':
          description: Unauthorized user
        '404':
          description: Comment not found
    
  /replies:
    get:
      description: |
        Gets all the `Reply` objects of a `Comment`
        Params **user_id** and **comment_id** specify the author and the comment of the reply.
      tags:
        - Reply
      parameters:
        -
          name: user_id
          in: query
          description: Unique identifier representing the user that mades the reply
          required: false
          type: number
          format: int
        - 
          name: comment_id
          in: query
          description: Unique identifier representing the comment which the reply belongs to
          required: false
          type: number
          format: int
      responses:
        '200':
          description: Successful response
          schema: 
            title: ArrayOfReplies
            type: array
            items:
              $ref: "#/definitions/Reply"
        '400':
          description: Parameters not allowed
        '401':
          description: Unauthorized user
        '404':
          description: Comment not found
  
    post:
      description: |
        A `User` creates a new `Reply` to a specific `Comment`
      tags:
        - Reply
      parameters:
        -
          name: user_id
          in: query
          description: Unique identifier representing the user who made the reply
          required: true
          type: number
          format: int
        -
          name: comment_id
          in: query
          description: Unique identifier representing the replied comment
          required: true
          type: number
          format: int
        - 
          name: body
          in: body
          description: Text of the reply
          required: true
          schema:
            $ref: "#/definitions/NewReply"

      responses:
        '201':
          description: Created reply
          schema:
            $ref: "#/definitions/Reply"
        '400':
          description: Content can not be blank
        '401':
          description: Unauthorized user
        '404':
          description: Comment not found
  
  /replies/{id}:
    get:
      description: |
        Gets a specific `Reply` by **id**
      tags:
        - Reply
      parameters:
        -
          name: id
          in: path
          description: ID of the reply
          required: true
          type: number
          format: int
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/Reply"
        '401':
          description: Unauthorized user        
        '404':
          description: Reply not found
  
  /users/{id}:
    get:
      description: |
        Gets a specific `User` identified by **id** param
      tags:
        - User
      parameters:
        -
          name: id
          in: path
          description: ID of the user
          required: true
          type: number
          format: int
          
      responses:
        '200':
          description: Successful response
          schema:
            $ref: "#/definitions/User"
        '401':
          description: Unauthorized user
        '404':
          description: User not found
    
    put:
      description: |
        Modifies the `User` about field
      tags:
        - User
      parameters:
        -
          name: id
          in: path
          description: ID of the user
          required: true
          type: number
          format: int
        -
          name: body
          in: body
          description: Text of the about area
          required: true
          schema:
            $ref: "#/definitions/UpdatedUser"
            
      responses:
        '200':
          description: Successful respoonse
          schema:
            $ref: "#/definitions/User"
        '401':
          description: Unauthorized user
        '404':
          description: User not found

definitions:
  Contribution:
    type: object
    properties:
      id:
        type: number
        format: integer
        description: Unique identifier representing specific contribution
      title:
        type: string
        description: Brief text from the header of the contribution
      content:
        type: string
        description: Main body of the contribution. It can be a url or a text
      created_at:
        type: string
        format: date
        description: Date when the contribution was created
      user:
        $ref: "#/definitions/HalResponse"
      comments: 
        type: number
        format: int
        description: Number of comments the contribution has
      punctuation:
        type: number
        format: int
        description: Number of votes the contribution has
    example:
      id: 1
      title: "I love bits"
      content: "http://www.fib.upc.edu/fib.html"
      created_at: "2016-11-23T11:30:25"
      user:
        url: "/users/3"
      comments: 0
      punctuation: 0
        
  NewContribution:
    type: object
    properties:
      title:
        type: string
        description: Brief text from the header of the contribution
      url:
        type: string
        description: Text containing a url
      text:
        type: string
        description: Text containing a question
      user_id:
        type: number
        format: int
        description: Unique identifier representing the user who mades the contribution
    example:
      -
        title: "This is a question"
        url: ""
        text: "How did I get here?"
        user_id: 2
      -
        title: "This is a url"
        url: "www.google.es"
        text: ""
        user_id: 2
  
  Comment:
    type: object
    properties:
      id:
        type: number
        format: int
        description: Unique identifier representing specific comment
      contribution:
        $ref: "#/definitions/HalResponse"
      user:
        $ref: "#/definitions/HalResponse"
      content:
        type: string
        description: Content of the comment itself
      punctuation:
        type: number
        format: int
        description: Number of votes the comment has
      created_at:
        type: string
        format: date
        description: Date when the comment was created
      replies:
        type: number
        format: int
        description: Number of replies the comment has
    example:
      id: 1
      contribution: 
        url: "/contributions/5"
      user:
        url: "/users/2"
      content: "This is a comment"
      punctuation: 2
      created_at: "2016-11-30T14:00:00"
      replies: 1
      
  NewComment:
    type: object
    properties:
      content:
        type: string
    example:
      content: "I'm a new comment"
  
  Reply:
    type: object
    properties:
      id:
        type: number
        format: int
        description: Unique identifier representing specific reply
      comment:
        $ref: "#/definitions/HalResponse"
      user:
        $ref: "#/definitions/HalResponse"
      content:
        type: string
        description: Content of the reply itself
      punctuation:
        type: number
        format: int
        description: Number of votes the reply has
      created_at:
        type: string
        format: date
        description: Date when the reply was created
    example:
      id: 1
      comment: 
        url: "/comments/5"
      user:
        url: "/users/2"
      content: "'This is a reply"
      punctuation: 0
      created_at: "2016-11-27T23:00:54"
  
  NewReply:
    type: object
    properties:
      content:
        type: string
    example:
      content: "I'm a new reply"
  
  User:
    type: object
    properties:
      id:
        type: number
        format: int
        description: Unique identifier representing specific user
      name:
        type: string
        description: User's name and surname
      about:
        type: string
        description: Little description about the user
      created_at:
        type: string
        format: date
        description: Date when the user was created
    example:
      id: 1
      name: "Pepito Menganito"
      about: "Be like me"
      created_at: "2016-05-23T15:14:52"
  
  UpdatedUser:
    type: object
    properties:
      about:
        type: string
    example:
      text: "This is the new me!"
  
  HalResponse:
    type: object
    properties:
      url:
        type: string
        description: Url to the resouce